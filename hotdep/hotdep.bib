@article{dean2013,
 author = {Dean, Jeffrey and Barroso, Luiz Andr{\'e}},
 title = {The Tail at Scale},
 journal = {Commun. ACM},
 issue_date = {February 2013},
 volume = {56},
 number = {2},
 month = feb,
 year = {2013},
 issn = {0001-0782},
 pages = {74--80},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/2408776.2408794},
 doi = {10.1145/2408776.2408794},
 acmid = {2408794},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@inproceedings{magpieosdi,
 author = {Barham, Paul and Donnelly, Austin and Isaacs, Rebecca and Mortier, Richard},
 title = {Using Magpie for Request Extraction and Workload Modelling},
 booktitle = {Proceedings of the 6th Conference on Symposium on Opearting Systems Design \& Implementation - Volume 6},
 series = {OSDI'04},
 year = {2004},
 location = {San Francisco, CA},
 pages = {18--18},
 numpages = {1},
 url = {http://dl.acm.org/citation.cfm?id=1251254.1251272},
 acmid = {1251272},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
} 

@techreport{dapper,
title = {Dapper, a Large-Scale Distributed Systems Tracing Infrastructure},
author  = {Benjamin H. Sigelman and Luiz André Barroso and Mike Burrows and Pat Stephenson and Manoj Plakal and Donald Beaver and Saul Jaspan and Chandan Shanbhag},
year  = 2010,
URL = {http://research.google.com/archive/papers/dapper-2010-1.pdf},
institution = {Google, Inc.}
}

@inproceedings{xtrace,
 author = {Fonseca, Rodrigo and Porter, George and Katz, Randy H. and Shenker, Scott and Stoica, Ion},
 title = {X-trace: A Pervasive Network Tracing Framework},
 booktitle = {Proceedings of the 4th USENIX Conference on Networked Systems Design \& Implementation},
 series = {NSDI'07},
 year = {2007},
 location = {Cambridge, MA},
 pages = {20--20},
 numpages = {1},
 url = {http://dl.acm.org/citation.cfm?id=1973430.1973450},
 acmid = {1973450},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
} 

@Inproceedings {fay,
abstract     = {<p>Fay is a flexible platform for the efficient collection, processing, and
                analysis of software execution traces. Fay provides dynamic tracing through use
                of runtime instrumentation and distributed aggregation within machines and across
                clusters. At the lowest level, Fay can be safely extended with new tracing
                primitives, including even untrusted, fully-optimized machine code, and Fay can
                be applied to running user-mode or kernel-mode software without compromising
                system stability. At the highest level, Fay provides a unified, declarative means
                of specifying what events to trace, as well as the aggregation, processing, and
                analysis of those events.</p>

                <p>We have implemented the Fay tracing platform for Windows and integrated it
                with two powerful, expressive systems for distributed programming. Our
                implementation is easy to use, can be applied to unmodified production systems,
                and provides primitives that allow the overhead of tracing to be greatly reduced,
                compared to previous dynamic tracing platforms. To show the generality of Fay
                tracing, we reimplement, in experiments, a range of tracing strategies and
                several custom mechanisms from existing tracing frameworks.</p>

                <p>Fay shows that modern techniques for high-level querying and data-parallel
                processing of disaggregated data streams are well suited to comprehensive
                monitoring of software execution in distributed systems. Revisiting a lesson from
                the late 1960’s [15], Fay also demonstrates the efficiency and extensibility
                benefits of using safe, statically-verified machine code as the basis for
                low-level execution tracing. Finally, Fay establishes that, by automatically
                deriving optimized query plans and code for safe extensions, the expressiveness
                and performance of high-level tracing queries can equal or even surpass that of
                specialized monitoring tools.</p>},
author       = {{\'U}lfar Erlingsson and Marcus Peinado and Simon Peter and Mihai Budiu},
booktitle    = {ACM Symposium on Operating Systems Principles (SOSP)},
month        = {October},
publisher    = {ACM},
title        = {Fay: Extensible Distributed Tracing from Kernels to Clusters},
url          = {http://research.microsoft.com/apps/pubs/default.aspx?id=153686},
year         = {2011},
}

@inproceedings{ostrowski,
title = {Diagnosing Latency in Multi-Tier Black-Box Services},
author  = {Krzysztof Ostrowski and Gideon Mann and Mark Sandler},
year  = 2011,
booktitle = {5th Workshop on Large Scale Distributed Systems and Middleware (LADIS 2011)}
}

@inproceedings{boyd2010analysis,
  title={An analysis of Linux scalability to many cores},
  author={Boyd-Wickizer, Silas and Clements, Austin T and Mao, Yandong and Pesterev, Aleksey and Kaashoek, M Frans and Morris, Robert and Zeldovich, Nickolai},
  year={2010},
  booktitle    = {USENIX Symposium on Operating Systems Design and Implementation (OSDI)},
  publisher={USENIX Association}
}

@TechReport {dogar2014,
abstract     = {<p>Most data center applications perform rich and complex tasks (e.g., executing
                a search query or generating a user’s wall). From a network perspective, these
                tasks typically comprise multiple flows, which traverse different parts of the
                network at potentially different times. Existing network resource allocation
                schemes, however, treat all these flows in isolation – rather than as part of a
                task – and therefore only optimize flow-level metrics.</p>

                <p>In this paper, we show that task-aware network scheduling, which groups flows
                of a task and schedules them together, can reduce both the average as well as
                tail completion time for typical data center applications. Based on the network
                footprint of real applications, we motivate the use of a scheduling policy that
                dynamically adapts the level of multiplexing in the network. To apply task-aware
                scheduling to online applications with small (sub-second) tasks, we design and
                implement Baraat, a decentralized task-aware scheduling system. Through
                experiments with Memcached on a small testbed and large-scale simulations, we
                show that Baraat can reduce tail task completion times by 60{\%} for data analytics
                workloads and 40{\%} for search workloads compared to existing mechanisms.</p>},
author       = {Fahad Dogar and Thomas Karagiannis and Hitesh Ballani and Ant Rowstron},
month        = {September},
number       = {MSR-TR-2013-96},
title        = {Decentralized Task-Aware Scheduling for Data Center Networks},
url          = {http://research.microsoft.com/apps/pubs/default.aspx?id=201494},
year         = {2013},
}

@inproceedings{ShiAuction2014,
 author = {Shi, Weijie and Zhang, Linquan and Wu, Chuan and Li, Zongpeng and Lau, Francis C.M.},
 title = {An Online Auction Framework for Dynamic Resource Provisioning in Cloud Computing},
 booktitle = {The 2014 ACM International Conference on Measurement and Modeling of Computer Systems},
 series = {SIGMETRICS '14},
 year = {2014},
 isbn = {978-1-4503-2789-3},
 location = {Austin, Texas, USA},
 pages = {71--83},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2591971.2591980},
 doi = {10.1145/2591971.2591980},
 acmid = {2591980},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {cloud computing, combinatorial auction, online algorithms, pricing, resource allocation, truthful mechanisms},
}

