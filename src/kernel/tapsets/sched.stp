/**
 * Tracks scheduler function calls and updates resourceful data structures
 * accordingly
 *
 * To check: in principle, all scheduler functions will disable kernel
 * preemption, so we should be able to access the per-cpu variables direcly
 * without worrying that we'll be preempted.
 *
 * Never sleep or call operations that might block within any of the following
 * functions.
 */
%{
  #include "rscfl/kernel/sched.h"
%}

// one extra hash table search on every context switch, for all processes
function _ctx_switch(next_tid:long) %{
  on_ctx_switch(STAP_ARG_next_tid);
%}

// only the kprobe overhead for processes that do not use resourceful
function _cpu_switch(from:long, to:long, pid:long) %{
  on_cpu_switch(STAP_ARG_from, STAP_ARG_to, STAP_ARG_pid);
%}

// available parameters @prev_pid, @prev_tid, @next_pid, @next_tid
probe rscfl.sched.ctxswitch = scheduler.ctxswitch {
  _ctx_switch(next_tid)
}

// available parameters: @cpu_from, @cpu_to, @pid
probe rscfl.sched.migrate = scheduler.migrate {
  _cpu_switch(cpu_from, cpu_to, pid)
}
