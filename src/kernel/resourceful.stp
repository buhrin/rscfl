#!/usr/bin/stap -g

%{

#include "costs.h"
#include "res_kernel/stap_shim.h"
#include "res_kernel/res_comm.h"

struct accounting *acct;

%}

global cycles=0
global wall_clock_time

probe begin
{
  if (rscfl_shim_init()) {
    printf("Unable to create debugfs entry\n");
    exit();
  }
  if (netlink_setup()) {
    printf("Cannot setup netlink\n");
    exit();
  }
  print("running");
}

probe end
{
  if (netlink_teardown()) {
    printf("Cannot teardown netlink\n");
  }
}

function netlink_setup:long()
%{
  STAP_RETVALUE = _netlink_setup();
%}

function netlink_teardown:long()
%{
  STAP_RETVALUE = _netlink_teardown();
%}

function rscfl_shim_init:long()
%{
  STAP_RETVALUE = _rscfl_shim_init();
%}

function should_acct_:long(pid:long, syscall_nr:long)
%{
  acct = _should_acct(STAP_ARG_pid, STAP_ARG_syscall_nr);
  STAP_RETVALUE = (acct != NULL);
%}

function should_acct()
{
  return should_acct_(pid(), -1);
}


function fill_struct(vfs:long, wall_clock_time:long)
%{
  _fill_struct(STAP_ARG_vfs, STAP_ARG_wall_clock_time, acct);
%}

function clear_acct_next(pid:long, syscall_nr:long)
%{
  _clear_acct_next(STAP_ARG_pid, STAP_ARG_syscall_nr);
%}


probe kernel.function("sys_socket").return
{
  if (should_acct()) {
    clear_acct_next(pid(), -1);
    fill_struct(get_cycles() - cycles, gettimeofday_us() - wall_clock_time);
  }
}

probe kernel.function("sys_socket").call
{
  start = gettimeofday_us()
  if (should_acct()) {
    cycles = get_cycles();
    wall_clock_time = start;
  }
}
