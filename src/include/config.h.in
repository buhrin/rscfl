/* configuration header
 * config.h - file generated by cmake from include/config.h.in template.
 *            Modify variables in CMakeLists.txt and/or in config.h.in but
 *            not directly in this file
 */
#ifndef _@PNAME@_CONFIG_H_
#define _@PNAME@_CONFIG_H_

#ifndef NDEBUG
  @DEFINE_NDEBUG@
#endif

#define RSCFL_PROJECT_NAME "@CMAKE_PROJECT_NAME@"
#define RSCFL_DESC "rscfl: application-centric kernel resource measurement"
#define RSCFL_KVERSION "@VERSION@"

typedef struct {
  unsigned int major;
  unsigned int minor;
  unsigned int patch;
  unsigned int data_layout;
} rscfl_version_t;

static const rscfl_version_t RSCFL_VERSION =
  {@MAJOR_VERSION@, @MINOR_VERSION@, @PATCH_VERSION@, @DATA_LAYOUT_VERSION@};
static const char RSCFL_VERSION_TAG[] = "@TAG_VERSION@";
static const char RSCFL_VERSION_STR[] = "@VERSION@";

@DEFINE_VERSION_MISMATCH_POLICY@

// resourceful kernel module parameters:
//
// CPU_PIDACCT_HTBL_LOGSIZE - the size of per-cpu hash tables storing
//                            (pid, current_accounting_region) pairs (K,V).
#define CPU_PIDACCT_HTBL_LOGSIZE 6

// character device properties
// the device is mmap-ed in user space for reading accounting results
#define RSCFL_DATA_MAJOR 91
#define RSCFL_DATA_MINOR 0


// The control char device is also mmap-ed in userspace, but is used to
// indicate to resourceful that we are interested in accounting the next
// syscall.
#define RSCFL_CTRL_MAJOR 92
#define RSCFL_CTRL_MINOR 0

// Control whether we should disable all XEN-related code (getting shared
// pages from the hypervisor and reading rscfl-related data from them).
//
// Enabling this requires you have a rscfl-enabled XEN hypervisor!
#define XEN_ENABLED @XEN_ENABLED@

// Control whether you want rscfl-based shadow kernels support.
// Please see https://www.repository.cam.ac.uk/handle/1810/248815 for more
// details
//
// Enabling this requires a kernel with CMA (Contiguous Memory Allocation)
// support
#define SHDW_ENABLED @SHDW_ENABLED@

#endif

